version: "3"

services:
  api-server:
    build:
      context: ./api-server
      dockerfile: Dockerfile.local-dev
    image: chengtze/timelink-api-server:0.0.1-local-dev
    container_name: api-server
    ports:
      - "8000:8000"
    volumes:
      - ./logs/api-server:/usr/src/app/logs
    env_file:
      - ./api-server/.env
    restart: unless-stopped
    depends_on:
      - db
  bot-server:
    build:
      context: ./bot-server
      dockerfile: Dockerfile
    image: chengtze/timelink-bot-server:0.0.1-local-dev
    container_name: bot-server
    ports:
      - "8800:8000"
    env_file:
      - ./bot-server/.env
    restart: unless-stopped
    depends_on:
      - api-server
  liff-server:
    build:
      context: ./liff-server
      dockerfile: Dockerfile
    image: chengtze/timelink-liff-server:0.0.1-local-dev
    container_name: liff-server
    ports:
      - "8801:3000"
    env_file:
      - ./liff-server/.env.production.local
    restart: unless-stopped
    depends_on:
      - api-server
  web_app:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    image: chengtze/timelink-web-app:0.0.1-local-dev
    container_name: web_app
    ports:
      - "8802:3000"
    env_file:
      - ./web_app/.env.production.local
    restart: unless-stopped
    depends_on:
      - api-server
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    image: chengtze/timelink-db:0.0.1-local-dev
    container_name: db
    ports:
      - "5432:5432"
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./logs/db:/var/log/postgresql
    restart: unless-stopped

networks:
  default:
    name: timelink_net
    driver: bridge
